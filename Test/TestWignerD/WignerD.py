# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_WignerD', [dirname(__file__)])
        except ImportError:
            import _WignerD
            return _WignerD
        if fp is not None:
            try:
                _mod = imp.load_module('_WignerD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _WignerD = swig_import_helper()
    del swig_import_helper
else:
    import _WignerD
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import numpy;

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _WignerD.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _WignerD.SwigPyIterator_value(self)
    def incr(self, n = 1): return _WignerD.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _WignerD.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _WignerD.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _WignerD.SwigPyIterator_equal(self, *args)
    def copy(self): return _WignerD.SwigPyIterator_copy(self)
    def next(self): return _WignerD.SwigPyIterator_next(self)
    def __next__(self): return _WignerD.SwigPyIterator___next__(self)
    def previous(self): return _WignerD.SwigPyIterator_previous(self)
    def advance(self, *args): return _WignerD.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _WignerD.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _WignerD.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _WignerD.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _WignerD.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _WignerD.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _WignerD.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _WignerD.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _WignerD.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _WignerD.vectori___nonzero__(self)
    def __bool__(self): return _WignerD.vectori___bool__(self)
    def __len__(self): return _WignerD.vectori___len__(self)
    def pop(self): return _WignerD.vectori_pop(self)
    def __getslice__(self, *args): return _WignerD.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _WignerD.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _WignerD.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _WignerD.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _WignerD.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _WignerD.vectori___setitem__(self, *args)
    def append(self, *args): return _WignerD.vectori_append(self, *args)
    def empty(self): return _WignerD.vectori_empty(self)
    def size(self): return _WignerD.vectori_size(self)
    def clear(self): return _WignerD.vectori_clear(self)
    def swap(self, *args): return _WignerD.vectori_swap(self, *args)
    def get_allocator(self): return _WignerD.vectori_get_allocator(self)
    def begin(self): return _WignerD.vectori_begin(self)
    def end(self): return _WignerD.vectori_end(self)
    def rbegin(self): return _WignerD.vectori_rbegin(self)
    def rend(self): return _WignerD.vectori_rend(self)
    def pop_back(self): return _WignerD.vectori_pop_back(self)
    def erase(self, *args): return _WignerD.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _WignerD.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _WignerD.vectori_push_back(self, *args)
    def front(self): return _WignerD.vectori_front(self)
    def back(self): return _WignerD.vectori_back(self)
    def assign(self, *args): return _WignerD.vectori_assign(self, *args)
    def resize(self, *args): return _WignerD.vectori_resize(self, *args)
    def insert(self, *args): return _WignerD.vectori_insert(self, *args)
    def reserve(self, *args): return _WignerD.vectori_reserve(self, *args)
    def capacity(self): return _WignerD.vectori_capacity(self)
    __swig_destroy__ = _WignerD.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _WignerD.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _WignerD.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _WignerD.vectord___nonzero__(self)
    def __bool__(self): return _WignerD.vectord___bool__(self)
    def __len__(self): return _WignerD.vectord___len__(self)
    def pop(self): return _WignerD.vectord_pop(self)
    def __getslice__(self, *args): return _WignerD.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _WignerD.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _WignerD.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _WignerD.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _WignerD.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _WignerD.vectord___setitem__(self, *args)
    def append(self, *args): return _WignerD.vectord_append(self, *args)
    def empty(self): return _WignerD.vectord_empty(self)
    def size(self): return _WignerD.vectord_size(self)
    def clear(self): return _WignerD.vectord_clear(self)
    def swap(self, *args): return _WignerD.vectord_swap(self, *args)
    def get_allocator(self): return _WignerD.vectord_get_allocator(self)
    def begin(self): return _WignerD.vectord_begin(self)
    def end(self): return _WignerD.vectord_end(self)
    def rbegin(self): return _WignerD.vectord_rbegin(self)
    def rend(self): return _WignerD.vectord_rend(self)
    def pop_back(self): return _WignerD.vectord_pop_back(self)
    def erase(self, *args): return _WignerD.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _WignerD.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _WignerD.vectord_push_back(self, *args)
    def front(self): return _WignerD.vectord_front(self)
    def back(self): return _WignerD.vectord_back(self)
    def assign(self, *args): return _WignerD.vectord_assign(self, *args)
    def resize(self, *args): return _WignerD.vectord_resize(self, *args)
    def insert(self, *args): return _WignerD.vectord_insert(self, *args)
    def reserve(self, *args): return _WignerD.vectord_reserve(self, *args)
    def capacity(self): return _WignerD.vectord_capacity(self)
    __swig_destroy__ = _WignerD.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _WignerD.vectord_swigregister
vectord_swigregister(vectord)

class vectorvectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorvectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorvectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _WignerD.vectorvectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _WignerD.vectorvectori___nonzero__(self)
    def __bool__(self): return _WignerD.vectorvectori___bool__(self)
    def __len__(self): return _WignerD.vectorvectori___len__(self)
    def pop(self): return _WignerD.vectorvectori_pop(self)
    def __getslice__(self, *args): return _WignerD.vectorvectori___getslice__(self, *args)
    def __setslice__(self, *args): return _WignerD.vectorvectori___setslice__(self, *args)
    def __delslice__(self, *args): return _WignerD.vectorvectori___delslice__(self, *args)
    def __delitem__(self, *args): return _WignerD.vectorvectori___delitem__(self, *args)
    def __getitem__(self, *args): return _WignerD.vectorvectori___getitem__(self, *args)
    def __setitem__(self, *args): return _WignerD.vectorvectori___setitem__(self, *args)
    def append(self, *args): return _WignerD.vectorvectori_append(self, *args)
    def empty(self): return _WignerD.vectorvectori_empty(self)
    def size(self): return _WignerD.vectorvectori_size(self)
    def clear(self): return _WignerD.vectorvectori_clear(self)
    def swap(self, *args): return _WignerD.vectorvectori_swap(self, *args)
    def get_allocator(self): return _WignerD.vectorvectori_get_allocator(self)
    def begin(self): return _WignerD.vectorvectori_begin(self)
    def end(self): return _WignerD.vectorvectori_end(self)
    def rbegin(self): return _WignerD.vectorvectori_rbegin(self)
    def rend(self): return _WignerD.vectorvectori_rend(self)
    def pop_back(self): return _WignerD.vectorvectori_pop_back(self)
    def erase(self, *args): return _WignerD.vectorvectori_erase(self, *args)
    def __init__(self, *args): 
        this = _WignerD.new_vectorvectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _WignerD.vectorvectori_push_back(self, *args)
    def front(self): return _WignerD.vectorvectori_front(self)
    def back(self): return _WignerD.vectorvectori_back(self)
    def assign(self, *args): return _WignerD.vectorvectori_assign(self, *args)
    def resize(self, *args): return _WignerD.vectorvectori_resize(self, *args)
    def insert(self, *args): return _WignerD.vectorvectori_insert(self, *args)
    def reserve(self, *args): return _WignerD.vectorvectori_reserve(self, *args)
    def capacity(self): return _WignerD.vectorvectori_capacity(self)
    __swig_destroy__ = _WignerD.delete_vectorvectori
    __del__ = lambda self : None;
vectorvectori_swigregister = _WignerD.vectorvectori_swigregister
vectorvectori_swigregister(vectorvectori)

class vectorvectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorvectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorvectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _WignerD.vectorvectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _WignerD.vectorvectord___nonzero__(self)
    def __bool__(self): return _WignerD.vectorvectord___bool__(self)
    def __len__(self): return _WignerD.vectorvectord___len__(self)
    def pop(self): return _WignerD.vectorvectord_pop(self)
    def __getslice__(self, *args): return _WignerD.vectorvectord___getslice__(self, *args)
    def __setslice__(self, *args): return _WignerD.vectorvectord___setslice__(self, *args)
    def __delslice__(self, *args): return _WignerD.vectorvectord___delslice__(self, *args)
    def __delitem__(self, *args): return _WignerD.vectorvectord___delitem__(self, *args)
    def __getitem__(self, *args): return _WignerD.vectorvectord___getitem__(self, *args)
    def __setitem__(self, *args): return _WignerD.vectorvectord___setitem__(self, *args)
    def append(self, *args): return _WignerD.vectorvectord_append(self, *args)
    def empty(self): return _WignerD.vectorvectord_empty(self)
    def size(self): return _WignerD.vectorvectord_size(self)
    def clear(self): return _WignerD.vectorvectord_clear(self)
    def swap(self, *args): return _WignerD.vectorvectord_swap(self, *args)
    def get_allocator(self): return _WignerD.vectorvectord_get_allocator(self)
    def begin(self): return _WignerD.vectorvectord_begin(self)
    def end(self): return _WignerD.vectorvectord_end(self)
    def rbegin(self): return _WignerD.vectorvectord_rbegin(self)
    def rend(self): return _WignerD.vectorvectord_rend(self)
    def pop_back(self): return _WignerD.vectorvectord_pop_back(self)
    def erase(self, *args): return _WignerD.vectorvectord_erase(self, *args)
    def __init__(self, *args): 
        this = _WignerD.new_vectorvectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _WignerD.vectorvectord_push_back(self, *args)
    def front(self): return _WignerD.vectorvectord_front(self)
    def back(self): return _WignerD.vectorvectord_back(self)
    def assign(self, *args): return _WignerD.vectorvectord_assign(self, *args)
    def resize(self, *args): return _WignerD.vectorvectord_resize(self, *args)
    def insert(self, *args): return _WignerD.vectorvectord_insert(self, *args)
    def reserve(self, *args): return _WignerD.vectorvectord_reserve(self, *args)
    def capacity(self): return _WignerD.vectorvectord_capacity(self)
    __swig_destroy__ = _WignerD.delete_vectorvectord
    __del__ = lambda self : None;
vectorvectord_swigregister = _WignerD.vectorvectord_swigregister
vectorvectord_swigregister(vectorvectord)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _WignerD.new_MatrixInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _WignerD.MatrixInt___eq__(self, *args)
    def __ne__(self, *args): return _WignerD.MatrixInt___ne__(self, *args)
    def RawData(self, *args): return _WignerD.MatrixInt_RawData(self, *args)
    def nrows(self): return _WignerD.MatrixInt_nrows(self)
    def ncols(self): return _WignerD.MatrixInt_ncols(self)
    def resize(self, *args): return _WignerD.MatrixInt_resize(self, *args)
    def clear(self): return _WignerD.MatrixInt_clear(self)
    def push_back(self, *args): return _WignerD.MatrixInt_push_back(self, *args)
    def swap(self, *args): return _WignerD.MatrixInt_swap(self, *args)
    __swig_destroy__ = _WignerD.delete_MatrixInt
    __del__ = lambda self : None;
MatrixInt_swigregister = _WignerD.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _WignerD.new_MatrixDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _WignerD.MatrixDouble___eq__(self, *args)
    def __ne__(self, *args): return _WignerD.MatrixDouble___ne__(self, *args)
    def RawData(self, *args): return _WignerD.MatrixDouble_RawData(self, *args)
    def nrows(self): return _WignerD.MatrixDouble_nrows(self)
    def ncols(self): return _WignerD.MatrixDouble_ncols(self)
    def resize(self, *args): return _WignerD.MatrixDouble_resize(self, *args)
    def clear(self): return _WignerD.MatrixDouble_clear(self)
    def push_back(self, *args): return _WignerD.MatrixDouble_push_back(self, *args)
    def swap(self, *args): return _WignerD.MatrixDouble_swap(self, *args)
    __swig_destroy__ = _WignerD.delete_MatrixDouble
    __del__ = lambda self : None;
MatrixDouble_swigregister = _WignerD.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _WignerD.new_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _WignerD.Quaternion___getitem__(self, *args)
    def __eq__(self, *args): return _WignerD.Quaternion___eq__(self, *args)
    def Components(self): return _WignerD.Quaternion_Components(self)
    def Re(self): return _WignerD.Quaternion_Re(self)
    def Vector(self): return _WignerD.Quaternion_Vector(self)
    def NormSquared(self): return _WignerD.Quaternion_NormSquared(self)
    def Norm(self): return _WignerD.Quaternion_Norm(self)
    def __neg__(self): return _WignerD.Quaternion___neg__(self)
    def __mul__(self, *args): return _WignerD.Quaternion___mul__(self, *args)
    def __div__(self, *args): return _WignerD.Quaternion___div__(self, *args)
    def __add__(self, *args): return _WignerD.Quaternion___add__(self, *args)
    def __sub__(self, *args): return _WignerD.Quaternion___sub__(self, *args)
    def Dot(self, *args): return _WignerD.Quaternion_Dot(self, *args)
    def Conjugate(self): return _WignerD.Quaternion_Conjugate(self)
    def Inverse(self): return _WignerD.Quaternion_Inverse(self)
    def Normalized(self): return _WignerD.Quaternion_Normalized(self)
    def Angle(self): return _WignerD.Quaternion_Angle(self)
    def Axis(self): return _WignerD.Quaternion_Axis(self)
    def Vec(self): return _WignerD.Quaternion_Vec(self)
    def EulerAnglesZYZ(self): return _WignerD.Quaternion_EulerAnglesZYZ(self)
    def exp(self): return _WignerD.Quaternion_exp(self)
    def log(self): return _WignerD.Quaternion_log(self)
    def __str__(self): return _WignerD.Quaternion___str__(self)
    __swig_destroy__ = _WignerD.delete_Quaternion
    __del__ = lambda self : None;
Quaternion_swigregister = _WignerD.Quaternion_swigregister
Quaternion_swigregister(Quaternion)


def Quaternions(*args):
  return _WignerD.Quaternions(*args)
Quaternions = _WignerD.Quaternions

def Conjugate(*args):
  return _WignerD.Conjugate(*args)
Conjugate = _WignerD.Conjugate

def dQdt(*args):
  return _WignerD.dQdt(*args)
dQdt = _WignerD.dQdt

def Re(*args):
  return _WignerD.Re(*args)
Re = _WignerD.Re
class vectorq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorq, name)
    __repr__ = _swig_repr
    def iterator(self): return _WignerD.vectorq_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _WignerD.vectorq___nonzero__(self)
    def __bool__(self): return _WignerD.vectorq___bool__(self)
    def __len__(self): return _WignerD.vectorq___len__(self)
    def pop(self): return _WignerD.vectorq_pop(self)
    def __getslice__(self, *args): return _WignerD.vectorq___getslice__(self, *args)
    def __setslice__(self, *args): return _WignerD.vectorq___setslice__(self, *args)
    def __delslice__(self, *args): return _WignerD.vectorq___delslice__(self, *args)
    def __delitem__(self, *args): return _WignerD.vectorq___delitem__(self, *args)
    def __getitem__(self, *args): return _WignerD.vectorq___getitem__(self, *args)
    def __setitem__(self, *args): return _WignerD.vectorq___setitem__(self, *args)
    def append(self, *args): return _WignerD.vectorq_append(self, *args)
    def empty(self): return _WignerD.vectorq_empty(self)
    def size(self): return _WignerD.vectorq_size(self)
    def clear(self): return _WignerD.vectorq_clear(self)
    def swap(self, *args): return _WignerD.vectorq_swap(self, *args)
    def get_allocator(self): return _WignerD.vectorq_get_allocator(self)
    def begin(self): return _WignerD.vectorq_begin(self)
    def end(self): return _WignerD.vectorq_end(self)
    def rbegin(self): return _WignerD.vectorq_rbegin(self)
    def rend(self): return _WignerD.vectorq_rend(self)
    def pop_back(self): return _WignerD.vectorq_pop_back(self)
    def erase(self, *args): return _WignerD.vectorq_erase(self, *args)
    def __init__(self, *args): 
        this = _WignerD.new_vectorq(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _WignerD.vectorq_push_back(self, *args)
    def front(self): return _WignerD.vectorq_front(self)
    def back(self): return _WignerD.vectorq_back(self)
    def assign(self, *args): return _WignerD.vectorq_assign(self, *args)
    def resize(self, *args): return _WignerD.vectorq_resize(self, *args)
    def insert(self, *args): return _WignerD.vectorq_insert(self, *args)
    def reserve(self, *args): return _WignerD.vectorq_reserve(self, *args)
    def capacity(self): return _WignerD.vectorq_capacity(self)
    __swig_destroy__ = _WignerD.delete_vectorq
    __del__ = lambda self : None;
vectorq_swigregister = _WignerD.vectorq_swigregister
vectorq_swigregister(vectorq)

class WignerDMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WignerDMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WignerDMatrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _WignerD.new_WignerDMatrix(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetAngles(self, *args): return _WignerD.WignerDMatrix_SetAngles(self, *args)
    def SetElement(self, *args): return _WignerD.WignerDMatrix_SetElement(self, *args)
    def Value(self): return _WignerD.WignerDMatrix_Value(self)
    def ValueReIm(self): return _WignerD.WignerDMatrix_ValueReIm(self)
    __swig_destroy__ = _WignerD.delete_WignerDMatrix
    __del__ = lambda self : None;
WignerDMatrix_swigregister = _WignerD.WignerDMatrix_swigregister
WignerDMatrix_swigregister(WignerDMatrix)


def WignerD(*args):
  return _WignerD.WignerD(*args)
WignerD = _WignerD.WignerD
class WignerDMatrix_Q(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WignerDMatrix_Q, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WignerDMatrix_Q, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _WignerD.new_WignerDMatrix_Q(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetQuaternion(self, *args): return _WignerD.WignerDMatrix_Q_SetQuaternion(self, *args)
    def SetElement(self, *args): return _WignerD.WignerDMatrix_Q_SetElement(self, *args)
    def Value(self): return _WignerD.WignerDMatrix_Q_Value(self)
    def ValueReIm(self): return _WignerD.WignerDMatrix_Q_ValueReIm(self)
    __swig_destroy__ = _WignerD.delete_WignerDMatrix_Q
    __del__ = lambda self : None;
WignerDMatrix_Q_swigregister = _WignerD.WignerDMatrix_Q_swigregister
WignerDMatrix_Q_swigregister(WignerDMatrix_Q)


def WignerD_Q(*args):
  return _WignerD.WignerD_Q(*args)
WignerD_Q = _WignerD.WignerD_Q
# This file is compatible with both classic and new-style classes.



% W.[field] = Value
% 
%   This function reassigns the data held by the Waveform
%   object W in the requested field to the data 'Value'.  It
%   is possible to chain assignments, as in W.LM(1,1) = 2,
%   though this is not always reliable.

function W = subsasgn(W, Indices, Value)
    if(size(Indices, 2) > 1);
        k = Indices(1, 1);
        switch k.type
          case '.'  % Data access methods
            switch lower(k.subs)
              case 'type'
                W.Type = subsasgn(W.Type, Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning type info ' ...
                       'from outside of class.']}];
              case 'identifier'
                W.Identifier = subsasgn(W.Identifier, ...
                                        Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning identifier info ' ...
                       'from outside of class.']}];
              case 'lm'
                W.LM = subsasgn(W.LM, Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning (l,m) info ' ...
                       'from outside of class.']}];
              case 'thetaphi'
                W.ThetaPhi = subsasgn(W.ThetaPhi, ...
                                      Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning (theta, phi) info ' ...
                       'from outside of class.']}];
              case 'postprocessing'
                W.PostProcessing = subsasgn(W.PostProcessing, ...
                                            Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning post-processing info ' ...
                       'from outside of class.']}];
              case 'timeoffset'
                W.TimeOffset = subsasgn(W.TimeOffset, ...
                                        Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning time-offset data ' ...
                       'from outside of class.']}];
              case 'phaseoffset'
                W.PhaseOffset = subsasgn(W.PhaseOffset, ...
                                         Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning phase-offset data ' ...
                       'from outside of class.']}];
              case 'time'
                W.Time = subsasgn(W.Time, Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning time data ' ...
                       'from outside of class.']}];
              case 'radius'
                W.Radius = subsasgn(W.Radius,Indices(1,2:end), ...
                                    Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning radius data ' ...
                       'from outside of class.']}];
              case 'amp'
                W.Amp = subsasgn(W.Amp, Indices(:,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning amplitude data ' ...
                       'from outside of class.']}];
              case 'phi'
                W.Phi = subsasgn(W.Phi, Indices(1,2:end), Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning phase data ' ...
                       'from outside of class.']}];
              case 'complex'
                W.Complex = subsasgn(W.Complex, Indices(1,2:end), ...
                                     Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning amplitude and phase data ' ...
                       'from outside of class.']}];
              otherwise
                error('Waveform.subsasgn: Invalid field name');
            end
          case {'{}', '()'}
            error(['Indexing not supported by Waveform objects ' ...
                   'in subsasgn.']);
        end;
        
    else
        
        switch Indices.type
          case '.'  % Data access methods
            switch lower(Indices.subs)
              case 'postprocessing'
                W.PostProcessing = Value;
                %W.PostProcessing = ...
                %    [W.PostProcessing; ...
                %     {['% Reassigning post-processing info from ' ...
                %       'outside of class.']}];
              case 'type'
                W.Type = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {sprintf('this.Type = ''%s'';', Value)}];
              case 'identifier'
                W.Identifier = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {sprintf(['this.Identifier = ''%s'';'], Value)}];
              case 'lm'
                W.LM = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning (l,m) data from ' ...
                       'outside of class.']}];
              case 'thetaphi'
                W.ThetaPhi = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning (theta, phi) data from ' ...
                       'outside of class.']}];
              case 'timeoffset'
                W.TimeOffset = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning time-offset data from ' ...
                       'outside of class.']}];
              case 'phaseoffset'
                W.PhaseOffset = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning phase-offset data from ' ...
                       'outside of class.']}];
              case 'time'
                if(size(Value,2)>1); Value = Value'; end;
                W.Time = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning time data from ' ...
                       'outside of class.']}];
              case 'radius'
                W.Radius = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning radius data from ' ...
                       'outside of class.']}];
              case 'amp'
                if(size(Value,2)==length(W.Time));
                    Value = Value';
                end;
                if(size(Value,1)~= length(W.Time));
                    warning('Time--Amp size mismatch.');
                end;
                W.Amp = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning amplitude data from ' ...
                       'outside of class.']}];
              case 'phi'
                if(size(Value,2)==length(W.Time));
                    Value = Value';
                end;
                if(size(Value,1)~= length(W.Time));
                    warning('Time--Phi size mismatch.');
                end;
                W.Phi = Value;
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning phase data from ' ...
                       'outside of class.']}];
              case 'complex'
                if(size(Value,2)==length(W.Time));
                    Value = Value';
                end;
                if(size(Value,1)~= length(W.Time));
                    warning('Time--Complex size mismatch.');
                end;
                [W.Amp W.Phi] = SplitToAmpPhi(Value);
                W.PostProcessing = ...
                    [W.PostProcessing; ...
                     {['% Reassigning amplitude and phase data ' ...
                       'from outside of class.']}];
              otherwise
                error('Waveform.subsasgn: Invalid field name');
            end
          case {'{}', '()'}
            error(['Indexing not supported by Waveform objects ' ...
                   'in subsasgn.']);
        end;
        
    end;
    
end
